情境：因為外部服務 API Key 用量有限制，每個 API Key 每秒只能發送 3 個請求。

需求：我們系統（A 系統）每秒需發送至少 30 個請求，請設計另一個系統（B 系統），能夠輪流使用至少 10 個 API Key，讓 A 系統避開外部服務 API Key Rate Limit 限制。

備註：請著重系統設計，配合使用 Laravel 諸如 Queue、Scheduler 等功能使用，程式碼可以寫個大概不用實際執行，我們會著重討論架構及 Laravel 功能運用的部分。

注意事項：

1. 請將設計思路、流程圖、問題解決的過程、資料庫設計想法盡量的記錄下來
2. 請考慮可能的災難及其可能應對方式
3. 請考慮未來 A 系統請求數量持續增加，B 系統擴充應對的方式
4. 請使用 GitHub、Git 管理你的產出（包含文字、流程圖、程式碼等等）

1. 請將設計思路、流程圖、問題解決的過程、資料庫設計想法盡量的記錄下來
	想法 => 功能 : 系統A每次需要對外部服務時, 需要由系統B(ex. ****/api/testb/getList 或 ****/api/testb/getList2 )轉發請求, 回應給系統A 
		Pro: 當多個API同時觸發時, 可能會造成一個key同時使用, 可能會觸發 API Key Rate Limit 限制 
		Ans: 使用laravel event與listener, 當觸發API時啟動event,  並且使用隊列事件lsitenter並免他同時觸發
		這方式接近於異步通知 不符合需求

	想法2 => 使用laravel Queue將key放入queue中 1秒3次所以將一個key分成3個job 每次取一個使用 使用完畢後release-1秒後可重新使用
			測試同時從queue pop工作是否會取得重複job -> 不會重複,就算pop之後沒fire也會在retry_after後 重排job

	// 設計一個table(api_key) 存放key
	php artisan queue:table
	php artisan migrate

2. 請考慮可能的災難及其可能應對方式
	- 目前需要加入新的api-key需要停機重建queue裡的job, 之後可以改成不停機入key
	- api驗證機制未加
3. 請考慮未來 A 系統請求數量持續增加，B 系統擴充應對的方式
	- 將新增的key加入資料庫中重新建立queue
	php artisan queue:init - 清空隊列, 重新根據資料庫建立job

2022 - 05 - 07 問題 :
1. 若系統加入 Redis，你會如何優化現有流程？
    laravel的queue改由redis來實現增加效能, 用redis setNX來做成執行鎖
    """
     $lock = Redis::setnx('lock-choose-api-key', 1);
     while ($lock == 0) {
      try {
       usleep(10); 
       $lock = Redis::setnx('lock-choose-api-key', 1);
      } catch (\Exception $e) {
       throw new Exception(500, '');
      }
     }
     // 取得queue &job動作
     Redis::del('lock-choose-api-key');
    """
    來做到當有人在對queue執行動作時,所有人皆須等其操作完後, 才能再次存取queue
2. 請問目前做法是否能夠確保 API Key 精準的在每秒被使用三次？如果不行，可能改善的方向是？
   原本的方法, pop之後job執行失敗或發生錯誤, 會重新將job放入queue ,會造成沒用到key卻將其重新排隊, 需要額外處理fail job的問題
3. 針對不停機增減 key 做規劃（用描述的） 
    不停機增減 key, 在新增1.執行鎖的設計後, 將'檢查DB的key並更新的job' 以下簡稱check-key寫入queue, 當有人pop到此請求check-key時, 運行此job重新建立queue, 建立完成後重新開始pop新job做處理
